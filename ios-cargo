#!/usr/bin/env python3
import argparse
import subprocess
import tomllib
import os
import shutil
import zipfile
import tempfile

def parse_cargo_toml():
    with open('Cargo.toml', 'rb') as f:
        cargo_toml = tomllib.load(f)
    app_name = cargo_toml['package']['name']
    app_id = cargo_toml['package']['metadata']['bundle']['identifier']
    return app_name, app_id

def ipa(args):
    print("Releasing the build...")
    args.release = True
    build(args)

    app_name, _ = parse_cargo_toml()
    build_type = 'release'
    target = get_target(args)
    cargo_target_dir = os.getenv('CARGO_TARGET_DIR')

    if cargo_target_dir:
        base_target_dir = cargo_target_dir
    else:
        base_target_dir = 'target'
    app_path = os.path.join(base_target_dir, target, build_type, 'bundle', 'ios', f'{app_name}.app')
    temp_dir = tempfile.mkdtemp()

    payload_dir = os.path.join(temp_dir, "Payload")
    os.makedirs(payload_dir)
    shutil.copytree(app_path, os.path.join(payload_dir, f'{app_name}.app'))

    ipa_path = f'{app_name}.ipa'
    with zipfile.ZipFile(ipa_path, 'w', zipfile.ZIP_DEFLATED) as ipa_file:
        for root, dirs, files in os.walk(payload_dir):
            for file in files:
                file_path = os.path.join(root, file)
                ipa_file.write(file_path, os.path.relpath(file_path, os.path.dirname(payload_dir)))

    shutil.rmtree(payload_dir)
    print(f"Created {ipa_path}")

def post_process_info_plist(plist_path, ipad):
    try:
        with open('insert.plist', 'r') as insert_file:
            insert_content = insert_file.read()
    except:
        insert_content = ""
    with open(plist_path, 'r') as plist_file:
        plist_content = plist_file.read()

    if ipad:
        ipad_content = """
        <key>UIDeviceFamily</key>
        <array>
            <integer>1</integer> <!-- iPhone -->
            <integer>2</integer> <!-- iPad -->
        </array>
        <key>UISupportedInterfaceOrientations</key>
        <array>
            <string>UIInterfaceOrientationPortrait</string>
            <string>UIInterfaceOrientationLandscapeLeft</string>
            <string>UIInterfaceOrientationLandscapeRight</string>
        </array>
        <key>UISupportedInterfaceOrientations~ipad</key>
        <array>
            <string>UIInterfaceOrientationPortrait</string>
            <string>UIInterfaceOrientationPortraitUpsideDown</string>
            <string>UIInterfaceOrientationLandscapeLeft</string>
            <string>UIInterfaceOrientationLandscapeRight</string>
        </array>
        """
        insert_content += ipad_content

    modified_content = plist_content.replace('</dict>', f'{insert_content}\n</dict>')

    with open(plist_path, 'w') as plist_file:
        plist_file.write(modified_content)

def get_target(args):
    target = 'aarch64-apple-ios'
    if args.x86:
        target = 'x86_64-apple-ios'
    elif args.sim:
        target = 'aarch64-apple-ios-sim'
    if args.target:
        target = args.target
    return target

def build(args):
    target = get_target(args)
    command = ['cargo', 'bundle', '--target', target]
    if args.release:
        command.append('--release')

    print(f"Running command: {' '.join(command)}")
    subprocess.run(command, check=True)
    app_name, _ = parse_cargo_toml()
    build_type = 'release' if args.release else 'debug'
    cargo_target_dir = os.getenv('CARGO_TARGET_DIR')
    if cargo_target_dir:
        base_target_dir = cargo_target_dir
    else:
        base_target_dir = 'target'
    plist_path = os.path.join(base_target_dir, target, build_type, 'bundle', 'ios', f'{app_name}.app', 'Info.plist')
    post_process_info_plist(plist_path, args.ipad)

def run_build(args):
    app_name, app_id = parse_cargo_toml()
    build_type = 'release' if args.release else 'debug'
    target = get_target(args)

    cargo_target_dir = os.getenv('CARGO_TARGET_DIR')
    if cargo_target_dir:
        base_target_dir = cargo_target_dir
    else:
        base_target_dir = 'target'
    app_path = os.path.join(base_target_dir, target, build_type, 'bundle', 'ios', f'{app_name}.app')

    install_command = [
        'xcrun', 'simctl', 'install', args.device, app_path
    ]

    launch_command = ['xcrun', 'simctl', 'launch', '--console', args.device, app_id]

    print(f"Running command: {' '.join(install_command)}")
    subprocess.run(install_command, check=True)

    print(f"Running command: {' '.join(launch_command)}")
    subprocess.run(launch_command, check=True)

def run(args):
    print("Running the build process...")
    build(args)
    print("Running the build...")
    run_build(args)

def main():
    parser = argparse.ArgumentParser(description='A script with build, run, run-build, and release subcommands.')
    subparsers = parser.add_subparsers(dest='command', required=True)

    build_parser = subparsers.add_parser('build', help='Build the project')
    build_parser.add_argument('--x86', action='store_true', help='Use x86 target')
    build_parser.add_argument('--sim', action='store_true', help='Use simulator target')
    build_parser.add_argument('--target', type=str, help='Specify custom target')
    build_parser.add_argument('--release', '-r', action='store_true', help='Build for release')
    build_parser.add_argument('--ipad', action='store_true', help='Include iPad-specific Info.plist entries')
    build_parser.set_defaults(func=build)

    run_parser = subparsers.add_parser('run', help='Build and run the project')
    run_parser.add_argument('--x86', action='store_true', help='Use x86 target')
    run_parser.add_argument('--sim', action='store_true', help='Use simulator target')
    run_parser.add_argument('--target', type=str, help='Specify custom target')
    run_parser.add_argument('--release', '-r', action='store_true', help='Build for release')
    run_parser.add_argument('--ipad', action='store_true', help='Include iPad-specific Info.plist entries')
    run_parser.add_argument('--device', type=str, default='booted', help='Specify the target device')

    run_parser.set_defaults(func=run)

    run_build_parser = subparsers.add_parser('run-build', help='Runs already built project')
    run_build_parser.add_argument('--x86', action='store_true', help='Use x86 target')
    run_build_parser.add_argument('--sim', action='store_true', help='Use simulator target')
    run_build_parser.add_argument('--target', type=str, help='Specify custom target')
    run_build_parser.add_argument('--release', '-r', action='store_true', help='Build for release')
    run_build_parser.add_argument('--device', type=str, default='booted', help='Specify the target device')
    run_build_parser.add_argument('--ipad', action='store_true', help='Include iPad-specific Info.plist entries')

    run_build_parser.set_defaults(func=run_build)

    release_parser = subparsers.add_parser('ipa', help='Creates a ipa')
    release_parser.add_argument('--x86', action='store_true', help='Use x86 target')
    release_parser.add_argument('--sim', action='store_true', help='Use simulator target')
    release_parser.add_argument('--target', type=str, help='Specify custom target')
    release_parser.add_argument('--release', '-r', action='store_true', help='Build for release')
    release_parser.add_argument('--ipad', action='store_true', help='Include iPad-specific Info.plist entries')
    release_parser.set_defaults(func=ipa)

    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()
